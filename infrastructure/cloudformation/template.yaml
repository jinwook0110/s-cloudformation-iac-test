AWSTemplateFormatVersion: '2010-09-09'
Description: 'IaC demo with S3, Step Functions and EC2'

Parameters:
  CodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code

Resources:
  # S3バケット
  DemoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "demo-bucket-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled

  # Lambda実行用のIAMロール
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Lambda関数1: テキストファイルをS3に格納
  TextToS3Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TextToS3Function
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: lambda_functions/text_to_s3.zip
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref DemoBucket

  # Lambda関数2: 1〜1000を出力
  Numbers1To1000Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Numbers1To1000Function
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: lambda_functions/numbers_1_to_1000.zip
      Timeout: 30

  # Lambda関数3: 1001〜2000を出力
  Numbers1001To2000Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Numbers1001To2000Function
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: lambda_functions/numbers_1001_to_2000.zip
      Timeout: 30

  # Step Functions実行用のIAMロール
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  # Step Functions定義
  DemoStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: DemoWorkflow
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Demo workflow with S3 and multiple Lambda functions",
          "StartAt": "StoreTextToS3",
          "States": {
            "StoreTextToS3": {
              "Type": "Task",
              "Resource": "${TextToS3Function.Arn}",
              "Next": "ProcessNumbersInParallel"
            },
            "ProcessNumbersInParallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Generate1To1000",
                  "States": {
                    "Generate1To1000": {
                      "Type": "Task",
                      "Resource": "${Numbers1To1000Function.Arn}",
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Generate1001To2000",
                  "States": {
                    "Generate1001To2000": {
                      "Type": "Task",
                      "Resource": "${Numbers1001To2000Function.Arn}",
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }

  # EC2インスタンス用のセキュリティグループ
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # EC2インスタンス用のIAMロール
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # EC2インスタンスプロファイル
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # EC2インスタンス
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      ImageId: ami-0bcc094591f354be2  # Amazon Linux 2 in ap-northeast-1 (2025-05)
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: suicatest-cfn-iac-test01
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><h1>Hello from CloudFormation IaC!</h1></html>" > /var/www/html/index.html

Outputs:
  S3BucketName:
    Description: Name of the created S3 bucket
    Value: !Ref DemoBucket
  StateMachineArn:
    Description: ARN of the Step Functions state machine
    Value: !Ref DemoStateMachine
  EC2InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref EC2Instance
  EC2PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  EC2PublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName