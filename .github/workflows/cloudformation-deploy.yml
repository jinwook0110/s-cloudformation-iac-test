name: CloudFormation デプロイ

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/cloudformation/**'
      - 'lambda_functions/**'
      - '.github/workflows/cloudformation-deploy.yml'
  workflow_dispatch:
    inputs:
      action:
        description: '実行するアクション'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - update
          - delete
          - force-delete

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: コードのチェックアウト
        uses: actions/checkout@v3
      
      - name: Pythonのセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: AWS認証情報の設定
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      
      - name: 強制削除処理
        if: github.event.inputs.action == 'force-delete'
        run: |
          STACK_NAME="demo-stack"
          
          # スタックが存在するか確認
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
            echo "既存のスタックを強制削除します..."
            
            # S3バケットを完全に空にする
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
            if [ -n "$BUCKET_NAME" ]; then
              echo "S3バケット ${BUCKET_NAME} を完全に空にします..."
              
              # Python スクリプトを一時ファイルに書き出して実行
              cat > /tmp/empty_bucket.py << 'EOF_PYTHON'
import boto3
import json
import os

s3_client = boto3.client('s3')
bucket_name = os.environ['BUCKET_NAME']

# バージョン付きオブジェクトを一つずつ削除
print("バージョン付きオブジェクトを削除中...")
try:
    versions = s3_client.list_object_versions(Bucket=bucket_name)
    
    # 通常のバージョンを削除
    if 'Versions' in versions:
        for version in versions.get('Versions', []):
            print(f"削除: {version['Key']} (バージョン: {version['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=version['Key'],
                VersionId=version['VersionId']
            )
    
    # 削除マーカーを削除
    if 'DeleteMarkers' in versions:
        for marker in versions.get('DeleteMarkers', []):
            print(f"削除マーカーを削除: {marker['Key']} (バージョン: {marker['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=marker['Key'],
                VersionId=marker['VersionId']
            )
except Exception as e:
    print(f"バケット削除中にエラーが発生しました: {e}")

print("バケット内のオブジェクトの削除が完了しました")
EOF_PYTHON

              # スクリプトを実行
              BUCKET_NAME=${BUCKET_NAME} python3 /tmp/empty_bucket.py
              
              # 通常のオブジェクトも念のため削除
              aws s3 rm s3://${BUCKET_NAME} --recursive --include "*" || true
            fi
            
            # スタックの削除
            aws cloudformation delete-stack --stack-name ${STACK_NAME}
            echo "スタック削除の完了を待機中..."
            aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} || true
            
            # 削除に失敗した場合、バケットを手動で削除
            if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
              echo "スタックの削除に失敗しました。AWSコンソールから手動で削除してください。"
              exit 1
            fi
          else
            echo "スタック ${STACK_NAME} は存在しません"
          fi
          
          exit 0
      
      - name: Lambda関数のパッケージ化とアップロード
        if: github.event.inputs.action != 'delete' && github.event.inputs.action != 'force-delete'
        run: |
          cd lambda_functions/text_to_s3/
          zip -r ../text_to_s3.zip *
          cd ../numbers_1_to_1000/
          zip -r ../numbers_1_to_1000.zip *
          cd ../numbers_1001_to_2000/
          zip -r ../numbers_1001_to_2000.zip *
          cd ../../
          
          CODE_BUCKET="code-bucket-$(aws sts get-caller-identity --query Account --output text)"
          echo "コードバケット名: ${CODE_BUCKET}"
          
          # バケットが存在しない場合は作成
          aws s3api head-bucket --bucket ${CODE_BUCKET} 2>/dev/null || aws s3 mb s3://${CODE_BUCKET}
          
          aws s3 cp lambda_functions/text_to_s3.zip s3://${CODE_BUCKET}/lambda_functions/
          aws s3 cp lambda_functions/numbers_1_to_1000.zip s3://${CODE_BUCKET}/lambda_functions/
          aws s3 cp lambda_functions/numbers_1001_to_2000.zip s3://${CODE_BUCKET}/lambda_functions/
          
          echo "CODE_BUCKET=${CODE_BUCKET}" >> $GITHUB_ENV
      
      - name: スタック状態の確認とクリーンアップ
        if: github.event.inputs.action != 'force-delete'
        run: |
          STACK_NAME="demo-stack"
          
          # スタックの状態を確認
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].StackStatus" --output text)
            echo "現在のスタック状態: ${STACK_STATUS}"
            
            # スタックのイベントを確認して最近のエラーを表示
            echo "最近のスタックイベント:"
            aws cloudformation describe-stack-events --stack-name ${STACK_NAME} --query "StackEvents[0:5]" --output yaml
            
            # ROLLBACK状態の場合はエラーの詳細を取得
            if [[ "${STACK_STATUS}" == *ROLLBACK* || "${STACK_STATUS}" == *FAILED* ]]; then
              echo "エラーイベントを検索中..."
              aws cloudformation describe-stack-events --stack-name ${STACK_NAME} --query "StackEvents[?ResourceStatus=='CREATE_FAILED' || ResourceStatus=='UPDATE_FAILED' || ResourceStatus=='DELETE_FAILED'].{Resource:LogicalResourceId, Reason:ResourceStatusReason}" --output table
            fi
            
            # ROLLBACK_COMPLETEやその他の失敗状態の場合は削除
            if [[ "${STACK_STATUS}" == *ROLLBACK_COMPLETE* || "${STACK_STATUS}" == *FAILED* ]]; then
              echo "スタックが失敗状態（${STACK_STATUS}）のため削除します"
              
              # 削除に先立ってS3バケットを完全に空にする
              BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
              if [ -n "$BUCKET_NAME" ]; then
                echo "S3バケット ${BUCKET_NAME} を完全に空にします..."
                
                # Python スクリプトを一時ファイルに書き出して実行
                cat > /tmp/empty_bucket.py << 'EOF_PYTHON'
import boto3
import json
import os

s3_client = boto3.client('s3')
bucket_name = os.environ['BUCKET_NAME']

# バージョン付きオブジェクトを一つずつ削除
print("バージョン付きオブジェクトを削除中...")
try:
    versions = s3_client.list_object_versions(Bucket=bucket_name)
    
    # 通常のバージョンを削除
    if 'Versions' in versions:
        for version in versions.get('Versions', []):
            print(f"削除: {version['Key']} (バージョン: {version['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=version['Key'],
                VersionId=version['VersionId']
            )
    
    # 削除マーカーを削除
    if 'DeleteMarkers' in versions:
        for marker in versions.get('DeleteMarkers', []):
            print(f"削除マーカーを削除: {marker['Key']} (バージョン: {marker['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=marker['Key'],
                VersionId=marker['VersionId']
            )
except Exception as e:
    print(f"バケット削除中にエラーが発生しました: {e}")

print("バケット内のオブジェクトの削除が完了しました")
EOF_PYTHON

                # スクリプトを実行
                BUCKET_NAME=${BUCKET_NAME} python3 /tmp/empty_bucket.py
                
                # 通常のオブジェクトも念のため削除
                aws s3 rm s3://${BUCKET_NAME} --recursive --include "*" || true
              fi
              
              aws cloudformation delete-stack --stack-name ${STACK_NAME}
              echo "スタック削除の完了を待機中..."
              aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} || true
              
              # 削除に失敗した場合
              if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
                echo "スタックの削除に失敗しました。force-deleteオプションを使用してください。"
                exit 1
              fi
            fi
            
            # create操作の場合は既存スタックを削除
            if [[ "${{ github.event.inputs.action }}" == "create" ]]; then
              echo "create操作のため既存スタックを削除します"
              
              # 削除に先立ってS3バケットを完全に空にする
              BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
              if [ -n "$BUCKET_NAME" ]; then
                echo "S3バケット ${BUCKET_NAME} を完全に空にします..."
                
                # Python スクリプトを一時ファイルに書き出して実行
                cat > /tmp/empty_bucket.py << 'EOF_PYTHON'
import boto3
import json
import os

s3_client = boto3.client('s3')
bucket_name = os.environ['BUCKET_NAME']

# バージョン付きオブジェクトを一つずつ削除
print("バージョン付きオブジェクトを削除中...")
try:
    versions = s3_client.list_object_versions(Bucket=bucket_name)
    
    # 通常のバージョンを削除
    if 'Versions' in versions:
        for version in versions.get('Versions', []):
            print(f"削除: {version['Key']} (バージョン: {version['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=version['Key'],
                VersionId=version['VersionId']
            )
    
    # 削除マーカーを削除
    if 'DeleteMarkers' in versions:
        for marker in versions.get('DeleteMarkers', []):
            print(f"削除マーカーを削除: {marker['Key']} (バージョン: {marker['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=marker['Key'],
                VersionId=marker['VersionId']
            )
except Exception as e:
    print(f"バケット削除中にエラーが発生しました: {e}")

print("バケット内のオブジェクトの削除が完了しました")
EOF_PYTHON

                # スクリプトを実行
                BUCKET_NAME=${BUCKET_NAME} python3 /tmp/empty_bucket.py
                
                # 通常のオブジェクトも念のため削除
                aws s3 rm s3://${BUCKET_NAME} --recursive --include "*" || true
              fi
              
              aws cloudformation delete-stack --stack-name ${STACK_NAME}
              echo "スタック削除の完了を待機中..."
              aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} || true
              
              # 削除に失敗した場合
              if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
                echo "スタックの削除に失敗しました。force-deleteオプションを使用してください。"
                exit 1
              fi
            fi
          else
            echo "スタック ${STACK_NAME} は存在しません"
          fi
      
      - name: CloudFormation テンプレートの検証
        if: github.event.inputs.action != 'delete' && github.event.inputs.action != 'force-delete'
        run: |
          echo "CloudFormationテンプレートを検証中..."
          aws cloudformation validate-template --template-body file://infrastructure/cloudformation/template.yaml
      
      - name: CloudFormationスタックの作成/更新
        if: github.event.inputs.action != 'delete' && github.event.inputs.action != 'force-delete'
        run: |
          STACK_NAME="demo-stack"
          
          # スタックが存在するか確認
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
            echo "既存のスタックを更新します..."
            # 更新に失敗した場合（変更がない場合など）のためのエラーハンドリング
            if ! aws cloudformation update-stack \
              --stack-name ${STACK_NAME} \
              --template-body file://infrastructure/cloudformation/template.yaml \
              --parameters ParameterKey=CodeBucket,ParameterValue=${CODE_BUCKET} \
              --capabilities CAPABILITY_NAMED_IAM; then
              echo "スタックの更新がスキップされました。おそらく変更がありません。"
            else
              echo "スタック更新完了を待機中..."
              aws cloudformation wait stack-update-complete --stack-name ${STACK_NAME} || true
              
              # 更新状態を確認
              STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].StackStatus" --output text)
              if [[ "${STACK_STATUS}" == *ROLLBACK* ]]; then
                echo "スタック更新に失敗しました。エラーイベントを表示します:"
                aws cloudformation describe-stack-events --stack-name ${STACK_NAME} --query "StackEvents[?ResourceStatus=='UPDATE_FAILED'].{Resource:LogicalResourceId, Reason:ResourceStatusReason}" --output table
                exit 1
              fi
            fi
          else
            echo "新しいスタックを作成します..."
            aws cloudformation create-stack \
              --stack-name ${STACK_NAME} \
              --template-body file://infrastructure/cloudformation/template.yaml \
              --parameters ParameterKey=CodeBucket,ParameterValue=${CODE_BUCKET} \
              --capabilities CAPABILITY_NAMED_IAM
            
            echo "スタック作成完了を待機中..."
            aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME} || true
            
            # 作成状態を確認
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].StackStatus" --output text)
            if [[ "${STACK_STATUS}" == *ROLLBACK* ]]; then
              echo "スタック作成に失敗しました。エラーイベントを表示します:"
              aws cloudformation describe-stack-events --stack-name ${STACK_NAME} --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].{Resource:LogicalResourceId, Reason:ResourceStatusReason}" --output table
              exit 1
            fi
          fi
      
      - name: CloudFormationスタックの削除
        if: github.event.inputs.action == 'delete'
        run: |
          STACK_NAME="demo-stack"
          
          # スタックが存在するか確認
          if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
            # 削除に先立ってS3バケットを完全に空にする
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
            if [ -n "$BUCKET_NAME" ]; then
              echo "S3バケット ${BUCKET_NAME} を完全に空にします..."
              
              # Python スクリプトを一時ファイルに書き出して実行
              cat > /tmp/empty_bucket.py << 'EOF_PYTHON'
import boto3
import json
import os

s3_client = boto3.client('s3')
bucket_name = os.environ['BUCKET_NAME']

# バージョン付きオブジェクトを一つずつ削除
print("バージョン付きオブジェクトを削除中...")
try:
    versions = s3_client.list_object_versions(Bucket=bucket_name)
    
    # 通常のバージョンを削除
    if 'Versions' in versions:
        for version in versions.get('Versions', []):
            print(f"削除: {version['Key']} (バージョン: {version['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=version['Key'],
                VersionId=version['VersionId']
            )
    
    # 削除マーカーを削除
    if 'DeleteMarkers' in versions:
        for marker in versions.get('DeleteMarkers', []):
            print(f"削除マーカーを削除: {marker['Key']} (バージョン: {marker['VersionId']})")
            s3_client.delete_object(
                Bucket=bucket_name,
                Key=marker['Key'],
                VersionId=marker['VersionId']
            )
except Exception as e:
    print(f"バケット削除中にエラーが発生しました: {e}")

print("バケット内のオブジェクトの削除が完了しました")
EOF_PYTHON

              # スクリプトを実行
              BUCKET_NAME=${BUCKET_NAME} python3 /tmp/empty_bucket.py
              
              # 通常のオブジェクトも念のため削除
              aws s3 rm s3://${BUCKET_NAME} --recursive --include "*" || true
            fi
            
            echo "スタックを削除します..."
            aws cloudformation delete-stack --stack-name ${STACK_NAME}
            echo "スタック削除の完了を待機中..."
            aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME} || true
            
            # 削除に失敗した場合
            if aws cloudformation describe-stacks --stack-name ${STACK_NAME} 2>/dev/null; then
              echo "スタックの削除に失敗しました。force-deleteオプションを使用してください。"
              exit 1
            fi
          else
            echo "スタック ${STACK_NAME} は存在しません"
          fi
          
      - name: デプロイ結果の確認
        if: github.event.inputs.action != 'delete' && github.event.inputs.action != 'force-delete' && success()
        run: |
          echo "デプロイ結果を確認中..."
          aws cloudformation describe-stacks --stack-name demo-stack --query "Stacks[0].{Status:StackStatus, Outputs:Outputs}" --output yaml
